<?xml version='1.1' encoding='UTF-8'?>
<xwikidoc version="1.3" reference="Main.SolrSearchMacros" locale="">
  <web>Main</web>
  <name>SolrSearchMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>XWiki.admin</creator>
  <creationDate>1536801654000</creationDate>
  <parent>Main.SolrSearch</parent>
  <author>XWiki.superadmin</author>
  <contentAuthor>XWiki.superadmin</contentAuthor>
  <date>1540892335000</date>
  <contentUpdateDate>1540892335000</contentUpdateDate>
  <version>1.28</version>
  <title>Solr Search Macros</title>
  <comment/>
  <minorEdit>true</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{template name="hierarchy_macros.vm"/}}&#xd;
&#xd;
{{velocity output="false"}}&#xd;
#set ($rangePattern = $regextool.compile('^[\[{](.+) TO (.+)[\]}]$'))&#xd;
#set ($wildcardPattern = $regextool.compile('^\(.*\*.*\)$'))&#xd;
&#xd;
#macro (displaySearchForm)&#xd;
  #set($void = $services.progress.startStep('#displaySearchForm'))&#xd;
  {{html clean="false"}}&#xd;
  &lt;form class="search-form row" action="$doc.getURL()" role="search">&#xd;
    &lt;div class="hidden">&#xd;
      &lt;input type="hidden" name="sort" value="$!escapetool.xml($sort)"/>&#xd;
      &lt;input type="hidden" name="sortOrder" value="$!escapetool.xml($sortOrder)"/>&#xd;
      &lt;input type="hidden" name="highlight" value="$highlightEnabled"/>&#xd;
      &lt;input type="hidden" name="facet" value="$facetEnabled"/>&#xd;
      ## The parameter used to determine if the request has been redirected with default search filters.&#xd;
      &lt;input type="hidden" name="r" value="$!escapetool.xml($request.r)"/>&#xd;
      #if ("$!request.debug" != '')&#xd;
        &lt;input type="hidden" name="debug" value="$escapetool.xml($request.debug)"/&gt;&#xd;
      #end&#xd;
      ## Preserve the current facet values when submitting a new search query.&#xd;
      #foreach ($entry in $request.parameterMap.entrySet())&#xd;
        #if ($entry.key.startsWith('f_') || $entry.key.startsWith('l_'))&#xd;
          #foreach ($value in $entry.value)&#xd;
            &lt;input type="hidden" name="$escapetool.xml($entry.key)" value="$escapetool.xml($value)"/>&#xd;
          #end&#xd;
        #end&#xd;
      #end&#xd;
    &lt;/div>&#xd;
    &lt;div class="col-xs-12 col-sm-6">&#xd;
      &lt;div class="input-group">&#xd;
        &lt;input type="search" name="text" class="form-control withTip useTitleAsTip"&#xd;
          title="$services.localization.render('search.page.bar.query.title')" value="$escapetool.xml($text)"/>&#xd;
        &lt;span class="input-group-btn">&#xd;
          &lt;button type="submit" class="btn btn-primary">&#xd;
            $services.icon.renderHTML('search')&#xd;
            &lt;span class="sr-only">$services.localization.render('search.page.bar.submit')&lt;/span>&#xd;
          &lt;/button>&#xd;
        &lt;/span>&#xd;
      &lt;/div>&#xd;
    &lt;/div>&#xd;
  &lt;/form>&#xd;
  {{/html}}&#xd;
  #set($void = $services.progress.endStep())&#xd;
#end&#xd;
&#xd;
#macro (displaySearchDebugInfo)&#xd;
  (% class="search-debug" %)(((&#xd;
    === Debug Information ===&#xd;
    #set ($debugMap = $searchResponse.debugMap)&#xd;
    #if ($debugMap)&#xd;
&#xd;
      {{html clean="false"}}&#xd;
      &lt;dl>&#xd;
        &lt;dt>Query Parser&lt;/dt>&#xd;
        &lt;dd>$!escapetool.xml($debugMap.get('QParser'))&lt;/dd>&#xd;
        &lt;dt>Parsed Query&lt;/dt>&#xd;
        &lt;dd>$!escapetool.xml($debugMap.get('parsedquery_toString'))&lt;/dd>&#xd;
        &lt;dt>Filter Queries&lt;/dt>&#xd;
        &lt;dd>&#xd;
          &lt;ul>&#xd;
            #foreach ($filterQuery in $debugMap.get('filter_queries'))&#xd;
              &lt;li>$!escapetool.xml($filterQuery)&lt;/li>&#xd;
            #end&#xd;
          &lt;/ul>&#xd;
        &lt;/dd>&#xd;
        &lt;dt>Processing Time&lt;/dt>&#xd;
        &lt;dd>&#xd;
          #displayProcessingTime($debugMap.get('timing'))&#xd;
        &lt;/dd>&#xd;
      &lt;/dl>&#xd;
      {{/html}}&#xd;
    #end&#xd;
  )))&#xd;
#end&#xd;
&#xd;
#macro (displayProcessingTime $timing)&#xd;
  &lt;ul>&#xd;
    ## The timing is not a Map but a NamedList.&#xd;
    #foreach ($entry in $timing)&#xd;
      &lt;li>&#xd;
        $!escapetool.xml($entry.key):&#xd;
        #if ($entry.value.time &amp;&amp; $entry.value.size() > 1)&#xd;
          #displayProcessingTime($entry.value)&#xd;
        #else&#xd;
          $!escapetool.xml($entry.value)&#xd;
        #end&#xd;
      &lt;/li>&#xd;
    #end&#xd;
  &lt;/ul>&#xd;
#end&#xd;
&#xd;
#macro (displaySearchFacets $searchResponse)&#xd;
  #set($void = $services.progress.startStep('#displaySearchFacets'))&#xd;
  (% class="search-facets collapsed-xs xform" %)(((&#xd;
    (% class="search-facets-header" %)(((&#xd;
      **{{translation key="solr.facets.title"/}}** (% class="pull-right visible-xs" %)$services.icon.render('search-plus')&#xd;
&#xd;
      (% class="xHint" %)&#xd;
      {{translation key="solr.facets.hint"/}}&#xd;
    )))&#xd;
    (% class="search-facets-actions" %)(((&#xd;
      #set ($resetParameters = {})&#xd;
      #foreach ($parameter in $request.parameterMap.entrySet())&#xd;
        #if ($parameter.key.startsWith('f_') || $parameter.key.startsWith('l_'))&#xd;
          #set ($discard = $resetParameters.put($parameter.key, []))&#xd;
        #end&#xd;
      #end&#xd;
      #extendQueryString($url $resetParameters)&#xd;
      [[{{translation key="solr.facets.resetAll"}}>>path:$url&#xd;
        ||class="search-facets-action-reset"]]## Continue in the same paragraph.&#xd;
      {{html clean="false"}}&#xd;
      &lt;a href="#" class="search-facets-action-collapseAll hidden">&#xd;
        $escapetool.xml($services.localization.render('solr.facets.collapseAll'))&#xd;
      &lt;/a>&#xd;
      &lt;a href="#" class="search-facets-action-expandAll hidden">&#xd;
        $escapetool.xml($services.localization.render('solr.facets.expandAll'))&#xd;
      &lt;/a>&#xd;
      &lt;span class="clearfloats">&lt;/span>&#xd;
      {{/html}}&#xd;
    )))&#xd;
    {{html clean="false"}}&#xd;
      #foreach ($facetField in $searchResponse.facetFields)&#xd;
        #displaySearchFacet($facetField)&#xd;
      #end&#xd;
    {{/html}}&#xd;
  )))&#xd;
  #set($void = $services.progress.endStep())&#xd;
#end&#xd;
&#xd;
#macro (displaySearchFacet $facetField)&#xd;
  #set ($facetRequestParameter = "f_$facetField.name")&#xd;
  #set ($facetRequestValues = $request.getParameterValues($facetRequestParameter))&#xd;
  #set ($facetValues = [])&#xd;
  #foreach ($facetValue in $facetField.values)&#xd;
    ## Keep only the values that have at least one match or that are specified on the request.&#xd;
    #if ($facetValue.count > 0 || ($facetRequestValues &amp;&amp; $facetRequestValues.contains($facetValue.name)))&#xd;
      #set ($discard = $facetValues.add($facetValue))&#xd;
    #end&#xd;
  #end&#xd;
  ## Facets that perform a 'facet.prefix'-based drill down (see https://wiki.apache.org/solr/HierarchicalFaceting) don't&#xd;
  ## have any values (not even with 0 count) when the prefix specified on the request doesn't have any "sub-values", but&#xd;
  ## we still want to display them to allow the user to reset the filter.&#xd;
  #if ($facetValues.size() > 0 || $facetRequestValues)&#xd;
    ## Show active facets (that have selected values or that have an explicit limit on the number of values, i.e.&#xd;
    ## pagination) as expanded. Collapse the rest, otherwise you have to scroll to see all the available facets.&#xd;
    #set ($facetValuesLimit = $request.getParameter("l_$facetField.name"))&#xd;
    &lt;div class="search-facet #if ($facetRequestValues || $facetValuesLimit) expanded#end" data-name="$facetField.name">&#xd;
      #displaySearchFacetHeader($facetField)&#xd;
      #displaySearchFacetBody($facetField)&#xd;
    &lt;/div>&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#macro (getXClassProperty $solrFieldName $property $classPropertyReference)&#xd;
  ## Remove the 'property.' prefix and the data type suffix.&#xd;
  #set ($stringReference = $stringtool.substringBeforeLast($solrFieldName.substring(9), '_'))&#xd;
  ## Note that the class property reference is resolved relative to the current wiki. This means the class must be&#xd;
  ## available on the wiki where the search is performed.&#xd;
  #set ($classPropertyReference = $NULL)&#xd;
  #setVariable("$classPropertyReference" $services.model.resolveClassProperty($stringReference, 'solr'))&#xd;
  #set ($classDocument = $xwiki.getDocument($classPropertyReference.parent))&#xd;
  #set ($property = $NULL)&#xd;
  #setVariable("$property" $classDocument.xWikiClass.get($classPropertyReference.name))&#xd;
#end&#xd;
&#xd;
#macro (displaySearchFacetHeader $facetField)&#xd;
  #set ($facetPrettyNameKey = "solr.field.$facetField.name")&#xd;
  #if ($services.localization.get($facetPrettyNameKey))&#xd;
    #set ($facetPrettyName = $services.localization.render($facetPrettyNameKey))&#xd;
  #elseif ($facetField.name.startsWith('property.'))&#xd;
    ## Display the translated property pretty name.&#xd;
    #getXClassProperty($facetField.name $property $classPropertyReference)&#xd;
    #set ($facetPrettyName = $property.translatedPrettyName)&#xd;
    #if ("$!facetPrettyName" == '')&#xd;
      #set ($facetPrettyName = $classPropertyReference.name)&#xd;
    #end&#xd;
  #else&#xd;
    #set ($facetPrettyName = $facetField.name)&#xd;
  #end&#xd;
&#xd;
 &lt;div class="search-facet-header">$escapetool.xml($facetPrettyName)&lt;/div>&#xd;
#end&#xd;
&#xd;
#macro (displaySearchFacetBody $facetField)&#xd;
  &lt;div class="search-facet-body">&#xd;
    #set ($facetDisplayer = $solrConfig.facetDisplayers.get($facetField.name))&#xd;
    #if (!$facetDisplayer &amp;&amp; $facetField.name.startsWith('property.'))&#xd;
      ## Choose a facet displayer based on the property type.&#xd;
      #getXClassProperty($facetField.name $property)&#xd;
      ## We rely on configuration instead of using a naming convention like "Main.Solr${property.classType}Facet"&#xd;
      ## because most of the property types don't need a custom facet displayer.&#xd;
      #set ($facetDisplayer = $solrConfig.facetDisplayersByPropertyType.get($property.classType))&#xd;
    #end&#xd;
    #if ($facetDisplayer)&#xd;
      #set ($facetDisplayer = $xwiki.getDocument($facetDisplayer))&#xd;
      #if ("$!facetDisplayer.content" != '')&#xd;
        $!facetDisplayer.getRenderedContent(false)&#xd;
      #else&#xd;
        #displaySearchFacetValues($facetValues)&#xd;
      #end&#xd;
    #else&#xd;
      #displaySearchFacetValues($facetValues)&#xd;
    #end&#xd;
  &lt;/div>&#xd;
#end&#xd;
&#xd;
#macro (displaySearchFacetValues $facetValues $customQueryStringParameters $customValueDisplayer)&#xd;
  #if ($facetValues.size() > 0)&#xd;
    &lt;ul>&#xd;
      #displaySearchFacetValuesLimited($facetValues $customQueryStringParameters $customValueDisplayer)&#xd;
    &lt;/ul>&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#macro (displaySearchFacetValuesLimited $facetValues $customQueryStringParameters $customValueDisplayer)&#xd;
  #set ($limitRequestParameter = "l_$facetField.name")&#xd;
  #set ($limit = $mathtool.toInteger($request.getParameter($limitRequestParameter)))&#xd;
  #if ("$!limit" == '')&#xd;
    #set ($limit = $solrConfig.facetPaginationStep)&#xd;
  #end&#xd;
  #set ($limit = $mathtool.max($mathtool.min($limit, $facetValues.size()), 0))&#xd;
  #foreach ($facetValue in $facetValues)&#xd;
    #if ($foreach.index &lt; $limit)&#xd;
      &lt;li>#displaySearchFacetValue($facetValue $customQueryStringParameters $customValueDisplayer)&lt;/li>&#xd;
    #else&#xd;
      #extendQueryString($url {$limitRequestParameter: [$mathtool.add($limit, $solrConfig.facetPaginationStep)]})&#xd;
      &lt;li>&lt;a href="$url" class="more">&amp;hellip; $escapetool.xml($services.localization.render(&#xd;
        'solr.facets.moreValues', [$mathtool.sub($facetValues.size(), $limit)]))&lt;/a>&lt;/li>&#xd;
      #break&#xd;
    #end&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#macro (displaySearchFacetValue $facetValue $customQueryStringParameters $customValueDisplayer)&#xd;
  #set ($selectedValues = [])&#xd;
  #if ($facetRequestValues)&#xd;
    #set ($discard = $selectedValues.addAll($facetRequestValues.subList(0, $facetRequestValues.size())))&#xd;
  #end&#xd;
  #set ($selected = $selectedValues.remove($facetValue.name))&#xd;
  #if (!$selected)&#xd;
    #set ($discard = $selectedValues.add($facetValue.name))&#xd;
  #end&#xd;
  ## Reset the pagination because the number of results can change when a facet is applied.&#xd;
  #set ($queryStringParameters = {$facetRequestParameter: $selectedValues, 'firstIndex': []})&#xd;
  #if ($customQueryStringParameters)&#xd;
    #set ($discard = $queryStringParameters.putAll($customQueryStringParameters))&#xd;
  #end&#xd;
  #extendQueryString($url $queryStringParameters)&#xd;
  &lt;div class="itemCount">$facetValue.count&lt;/div>&#xd;
  &lt;a href="$url" class="itemName#if ($selected) selected#end#if ($facetValue.name == '') empty#end">&#xd;
    #if ($facetValue.name == '')&#xd;
      #set ($facetPrettyValueKey = "solr.field.${facetField.name}.emptyValue")&#xd;
      #if (!$services.localization.get($facetPrettyValueKey))&#xd;
        #set ($facetPrettyValueKey = "solr.facets.emptyValue")&#xd;
      #end&#xd;
      #set ($facetPrettyValue = $services.localization.render($facetPrettyValueKey))&#xd;
    #else&#xd;
      #set ($facetPrettyValue = $facetValue.name)&#xd;
    #end&#xd;
    #if ($customValueDisplayer)&#xd;
      #evaluate("${escapetool.h}${customValueDisplayer}(${escapetool.d}facetPrettyValue)")&#xd;
    #else&#xd;
      $escapetool.xml($facetPrettyValue)&#xd;
    #end&#xd;
  &lt;/a>&#xd;
  &lt;div class="clearfloats">&lt;/div>&#xd;
#end&#xd;
&#xd;
#**&#xd;
 * If the facet has values specified on the request then keep only those that are included in the list of matched facet&#xd;
 * values. Don't use this macro for date or range facets because in this case the values specified on the request are&#xd;
 * never found as is in the list of facet values (e.g. a range will match multiple facet values). This macro ensures&#xd;
 * that the URL to select/unselect a facet value doesn't keep unmatched values (otherwise the URL will have values that&#xd;
 * you cannot remove using the facet UI).&#xd;
 *#&#xd;
#macro (retainMatchedRequestValues)&#xd;
  #if ($facetRequestValues)&#xd;
    #set ($matchedValues = [])&#xd;
    #foreach ($facetValue in $facetValues)&#xd;
      #set ($discard = $matchedValues.add($facetValue.name))&#xd;
    #end&#xd;
    #set ($matchedRequestValues = [])&#xd;
    #set ($discard = $matchedRequestValues.addAll($facetRequestValues.subList(0, $facetRequestValues.size())))&#xd;
    #set ($discard = $matchedRequestValues.retainAll($matchedValues))&#xd;
    #set ($facetRequestValues = $matchedRequestValues)&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#macro (displaySearchResultsSort)&#xd;
  #set ($defaultSortOrder = $solrConfig.sortFields.get($type))&#xd;
  #if (!$defaultSortOrder)&#xd;
    #set ($defaultSortOrder = {'score': 'desc'})&#xd;
  #end&#xd;
  #set ($sortOrderSymbol = {&#xd;
    'asc': $services.icon.render('caret-up'),&#xd;
    'desc': $services.icon.render('caret-down')&#xd;
  })&#xd;
  (% class="search-options" %)&#xd;
  * {{translation key="solr.options"/}}&#xd;
  #if($highlightEnabled)#extendQueryString($url {'highlight': [false]})#else#extendQueryString($url {'highlight': [true]})#end&#xd;
  * [[{{translation key="solr.options.highlight"/}}>&gt;path:$url||class="options-item#if($highlightEnabled) active#end" title="$services.localization.render('solr.options.highlight.title')"]]&#xd;
  #if($facetEnabled)#extendQueryString($url {'facet': [false]})#else#extendQueryString($url {'facet': [true]})#end&#xd;
  * [[{{translation key="solr.options.facet"/}}>>path:$url||class="options-item#if($facetEnabled) active#end" title="$services.localization.render('solr.options.facet.title')"]]&#xd;
&#xd;
  (% class="search-results-sort" %)&#xd;
  * {{translation key="solr.sortBy"/}}&#xd;
  #foreach ($entry in $defaultSortOrder.entrySet())&#xd;
    #set ($class = 'sort-item')&#xd;
    #set ($sortOrderIndicator = $NULL)&#xd;
    #set ($targetSortOrder = $entry.value)&#xd;
    #if ($sort == $entry.key)&#xd;
      #set ($class = "$class active")&#xd;
      #set ($sortOrderHint = $services.localization.render("solr.sortOrder.$sortOrder"))&#xd;
      #set ($sortOrderIndicator = "(% class=""sort-item-order"" title=""$sortOrderHint"" %)$sortOrderSymbol.get($sortOrder)(%%)")&#xd;
      #set ($targetSortOrder = "#if ($sortOrder == 'asc')desc#{else}asc#end")&#xd;
    #end&#xd;
    #extendQueryString($url {'sort': [$entry.key], 'sortOrder': [$targetSortOrder]})&#xd;
    * [[{{translation key="solr.sortBy.$entry.key"/}}$!sortOrderIndicator>>path:$url||class="$class"]]&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#macro (extendQueryString $url $extraParameters)&#xd;
  #set ($parameters = {})&#xd;
  #set ($discard = $parameters.putAll($request.getParameterMap()))&#xd;
  #set ($discard = $parameters.putAll($extraParameters))&#xd;
  #set ($queryString = $escapetool.url($parameters))&#xd;
  #set ($url = $NULL)&#xd;
  #setVariable("$url" $doc.getURL('view', $queryString))&#xd;
#end&#xd;
&#xd;
#macro (displaySearchResults)&#xd;
  #set ($results = $searchResponse.results)&#xd;
  #set ($paginationParameters = {&#xd;
    'url': $doc.getURL('view', "$!request.queryString.replaceAll('firstIndex=[0-9]*', '')"),&#xd;
    'totalItems': $results.numFound,&#xd;
    'defaultItemsPerPage': $rows,&#xd;
    'position': 'top'&#xd;
  })&#xd;
  {{html clean="false"}}&#xd;
  &lt;div class="search-page-top">#pagination($paginationParameters)&lt;/div>&#xd;
{{/html}}&#xd;
  (% class="search-results" %)(((&#xd;
    #foreach ($searchResult in $results)&#xd;
      #displaySearchResult($searchResult)&#xd;
    #end&#xd;
  )))&#xd;
  #set ($discard = $paginationParameters.put('position', 'bottom'))&#xd;
  {{html clean="false"}}#pagination($paginationParameters){{/html}}&#xd;
&#xd;
  #displayRSSLink()&#xd;
#end&#xd;
&#xd;
#macro (displayRSSLink)&#xd;
  {{html clean="false"}}&#xd;
  #set ($parameters = {})&#xd;
  ## We keep most of the current request parameters so that the RSS feed matches the current search query and filters.&#xd;
  #set ($discard = $parameters.putAll($request.getParameterMap()))&#xd;
  ## The feed will provide the most recent results that match the search query and filters.&#xd;
  #set ($discard = $parameters.put('sort', 'date'))&#xd;
  #set ($discard = $parameters.put('sortOrder', 'desc'))&#xd;
  ## Reset the pagination so that only the top results are included.&#xd;
  #set ($discard = $parameters.remove('firstIndex'))&#xd;
  ## Add the parameters required to output the RSS feed instead of the search UI.&#xd;
  #set ($discard = $parameters.put('outputSyntax', 'plain'))&#xd;
  #set ($discard = $parameters.put('media', 'rss'))&#xd;
  &lt;a href="$doc.getURL('get', $escapetool.url($parameters))" class="hasIcon iconRSS">&#xd;
    $services.localization.render('search.rss', ["[$escapetool.xml($text)]"])&#xd;
  &lt;/a>&#xd;
  {{/html}}&#xd;
#end&#xd;
&#xd;
#macro (displaySearchResult $searchResult)&#xd;
  #set ($searchResultReference = $services.solr.resolve($searchResult))&#xd;
  (% class="search-result type-$searchResult.type.toLowerCase()" %)(((&#xd;
    ## We use the HTML macro here mainly because we don't have a way to escape the wiki syntax in the data provided by the user.&#xd;
    {{html clean="false"}}&#xd;
    #evaluate("${escapetool.h}displaySearchResult_$searchResult.type.toLowerCase()(${escapetool.d}searchResult)")&#xd;
    #displaySearchResultHighlighting($searchResult)&#xd;
    {{/html}}&#xd;
    #if ($debug)&#xd;
&#xd;
      ## Scoring debug data.&#xd;
      ## The reason we used a separate HTML block with no cleaning is because the scoring debug data may contain some&#xd;
      ## characters that are considered invalid by JDOM library which is used for parsing the HTML when cleaning is on.&#xd;
      ## E.g. "0x0 is not a legal XML character" (org.jdom.IllegalDataException).&#xd;
      {{html clean="false"}}&#xd;
      &lt;div class="search-result-debug">$!escapetool.xml($searchResponse.explainMap.get($searchResult.id))&lt;/div>&#xd;
      {{/html}}&#xd;
    #end&#xd;
  )))&#xd;
#end&#xd;
&#xd;
#macro (displaySearchResult_document $searchResult)&#xd;
  #displaySearchResultTitle()&#xd;
  #displaySearchResultLocation()&#xd;
  &lt;div class="search-result-author">&#xd;
    $services.localization.render('core.footer.modification', [&#xd;
      "#displayUserProfileLink($searchResult.author $searchResult.author_display)",&#xd;
      $xwiki.formatDate($searchResult.date)&#xd;
    ])&#xd;
  &lt;/div>&#xd;
#end&#xd;
&#xd;
#macro (displaySearchResult_attachment $searchResult)&#xd;
  &lt;h2 class="search-result-title">&#xd;
    $services.icon.renderHTML('attach')&#xd;
    #set ($attachmentURL = $xwiki.getURL($searchResultReference))&#xd;
    #set ($downloadHint = $services.localization.render('core.viewers.attachments.download'))&#xd;
    &lt;a href="$attachmentURL" title="$escapetool.xml($downloadHint)">&#xd;
      $escapetool.xml($searchResultReference.name)&#xd;
    &lt;/a>&#xd;
    #set ($attachmentHistoryURL = $xwiki.getURL($searchResultReference, 'viewattachrev', $NULL))&#xd;
    #set ($historyHint = $services.localization.render('core.viewers.attachments.showHistory'))&#xd;
    &lt;a href="$attachmentHistoryURL" title="$escapetool.xml($historyHint)" class="search-result-version">&#xd;
      $escapetool.xml($searchResult.attversion)&#xd;
    &lt;/a>&#xd;
  &lt;/h2>&#xd;
  #displaySearchResultLocation($searchResult)&#xd;
  &lt;div class="search-result-uploader">&#xd;
    #set ($uploader = "#displayUserProfileLink($searchResult.attauthor.get(0) $searchResult.attauthor_display.get(0))")&#xd;
    #set ($uploadDate = $xwiki.formatDate($searchResult.attdate.get(0)))&#xd;
    #set ($fileSize = "#dynamicsize($searchResult.attsize.get(0))")&#xd;
    $services.localization.render('solr.result.uploadedBy', [$uploader, $uploadDate, $fileSize])&#xd;
  &lt;/div>&#xd;
  &lt;div class="search-result-mediaType">$services.localization.render('solr.result.mediaType',&#xd;
    [$escapetool.xml($searchResult.mimetype.get(0))])&lt;/div>&#xd;
#end&#xd;
&#xd;
#macro (displaySearchResult_object $searchResult)&#xd;
  &lt;h2 class="search-result-title">&#xd;
    $services.icon.renderHTML('cubes')&#xd;
    $escapetool.xml("${searchResult.get('class').get(0)}[$searchResult.number]")&#xd;
  &lt;/h2>&#xd;
  #displaySearchResultLocation($searchResult)&#xd;
#end&#xd;
&#xd;
#macro (displaySearchResult_object_property $searchResult)&#xd;
  &lt;h2 class="search-result-title">&#xd;
    $services.icon.renderHTML('cube') $escapetool.xml($searchResult.propertyname)&#xd;
  &lt;/h2>&#xd;
  #displaySearchResultLocation($searchResult)&#xd;
#end&#xd;
&#xd;
#macro (displaySearchResultTitle)&#xd;
  #set ($showLocale = $searchResult.locale != '' &amp;&amp; $searchResult.locale != "$xcontext.locale")&#xd;
  #set ($titleURL = $xwiki.getURL($searchResultReference))&#xd;
  #if ($showLocale)&#xd;
    #set ($titleURL = $xwiki.getURL($searchResultReference, 'view', "language=$searchResult.locale"))&#xd;
  #end&#xd;
  &lt;h2 class="search-result-title">&#xd;
    $services.icon.renderHTML('file-white')&#xd;
    &lt;a href="$titleURL">$escapetool.xml($searchResult.title_)&lt;/a>&#xd;
    #if ($showLocale)&#xd;
      &lt;span title="$escapetool.xml($services.localization.render('solr.result.language'))"&#xd;
        class="search-result-language" >($escapetool.xml($searchResult.locale))&lt;/span>&#xd;
    #end&#xd;
  &lt;/h2>&#xd;
#end&#xd;
&#xd;
#macro (displaySearchResultLocation $searchResult)&#xd;
  &lt;div class="search-result-location">&#xd;
    $services.localization.render('solr.result.locatedIn')&#xd;
    #set ($locationOptions = {&#xd;
      'excludeSelf': true,&#xd;
      'limit': 6&#xd;
    })&#xd;
    #hierarchy($searchResultReference $locationOptions)&#xd;
  &lt;/div>&#xd;
#end&#xd;
&#xd;
#macro (displayUserProfileLink $userReference $userName)&#xd;
#if ($userReference)&#xd;
## We could test if the specified user exists but we want to speed up the search.&#xd;
&lt;a href="$xwiki.getURL($userReference)">$escapetool.xml($userName)&lt;/a>##&#xd;
#else&#xd;
$services.localization.render('core.users.unknownUser')##&#xd;
#end&#xd;
#end&#xd;
&#xd;
#macro (displaySearchResultHighlighting $searchResult)&#xd;
  #getSearchResultHighlighting($searchResult $highlighting)&#xd;
  #if ($highlighting.size() > 0)&#xd;
    &lt;dl class="search-result-highlights">&#xd;
      #foreach ($entry in $highlighting)&#xd;
        &lt;dt>&#xd;
          #if ($services.localization.get("solr.field.$entry.field"))&#xd;
            $services.localization.render("solr.field.$entry.field")&#xd;
          #elseif ($entry.field.startsWith('property.'))&#xd;
            #getXClassProperty($entry.field $property $classPropertyReference)&#xd;
            #set ($propertyPrettyName = $property.translatedPrettyName)&#xd;
            #if ("$!propertyPrettyName" == '')&#xd;
              #set ($propertyPrettyName = $classPropertyReference.name)&#xd;
            #end&#xd;
            $propertyPrettyName&#xd;
          #else&#xd;
            $entry.field&#xd;
          #end&#xd;
        &lt;/dt>&#xd;
        &lt;dd>#displaySearchResultMatches($entry.matches)&lt;/dd>&#xd;
      #end&#xd;
    &lt;/dl>&#xd;
    #if ($highlighting.size() > 1)&#xd;
      ## We wrap the link in a DIV because otherwise the HTML cleaning generates a paragraph.&#xd;
      &lt;div>&#xd;
        &lt;a href="#" class="search-result-highlightAll hidden">&#xd;
          $escapetool.xml($services.localization.render('solr.result.highlightAll'))&#xd;
        &lt;/a>&#xd;
      &lt;/div>&#xd;
    #end&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#macro (displaySearchResultMatches $matches)&#xd;
  #foreach ($match in $matches)&#xd;
    #if ($foreach.count > 1)&#xd;
      &lt;span class="separator">&amp;hellip;&lt;/span>&#xd;
    #end&#xd;
    &lt;blockquote class="search-result-highlight">$match&lt;/blockquote>&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#macro (getSearchResultHighlighting $searchResult $return)&#xd;
  #set ($highlighting = $searchResponse.highlighting.get($searchResult.id))&#xd;
  #set ($highlightingByLanguage = {})&#xd;
  #foreach ($entry in $highlighting.entrySet())&#xd;
    ## Remove the language suffix (e.g. __, _en, _fr, _de) from the field name.&#xd;
    #set ($field = $stringtool.removeEnd($entry.key, '__'))&#xd;
    #set ($language = $stringtool.substringAfterLast($field, '_'))&#xd;
    #if ($services.localization.toLocale($language))&#xd;
      #set ($field = $stringtool.substringBeforeLast($field, '_'))&#xd;
    #else&#xd;
      #set ($language = '')&#xd;
    #end&#xd;
    #set ($matchesByLanguage = $highlightingByLanguage.get($field))&#xd;
    #if (!$matchesByLanguage)&#xd;
      #set ($matchesByLanguage = {})&#xd;
      #set ($discard = $highlightingByLanguage.put($field, $matchesByLanguage))&#xd;
    #end&#xd;
    #set ($discard = $matchesByLanguage.put($language, $entry.value))&#xd;
  #end&#xd;
  ## Keep only the matches correspoding to the search result locale.&#xd;
  #set ($highlighting = [])&#xd;
  ## Fields with a higher index will be displayed first. Fields that are not included will be displayed at the end.&#xd;
  #set ($fieldPriority = ['filename', 'attcontent', 'objcontent', 'comment', 'propertyname', 'propertyvalue', 'title', 'doccontent'])&#xd;
  #foreach ($entry in $highlightingByLanguage.entrySet())&#xd;
    #set ($matches = $entry.value.get($searchResult.locale))&#xd;
    #if (!$matches)&#xd;
      ## This should not happen but let's play safe.&#xd;
      #set ($matches = $entry.value.entrySet().iterator().next().value)&#xd;
    #end&#xd;
    ## Sanitize the matches.&#xd;
    #foreach ($match in $matches)&#xd;
      #set ($match = $match.replace('&lt;span class="search-text-highlight">', "\u0011"))&#xd;
      #set ($match = $match.replace('&lt;span class="search-text-highlight-stop">&lt;/span>&lt;/span>', "\u0013"))&#xd;
      #set ($match = $escapetool.xml($match))&#xd;
      #set ($match = $match.replace("\u0011", '&lt;span class="search-text-highlight">'))&#xd;
      #set ($match = $match.replace("\u0013", '&lt;/span>'))&#xd;
      #set ($discard = $matches.set($mathtool.sub($foreach.count, 1), $match))&#xd;
    #end&#xd;
    #set ($discard = $highlighting.add({&#xd;
      'field': $entry.key,&#xd;
      'priority': $fieldPriority.indexOf($entry.key),&#xd;
      'matches': $matches&#xd;
    }))&#xd;
  #end&#xd;
  #set ($highlighting = $sorttool.sort($highlighting, 'priority:desc'))&#xd;
  #set ($return = $NULL)&#xd;
  #setVariable("$return" $highlighting)&#xd;
#end&#xd;
&#xd;
#macro (getSearchResults)&#xd;
  #set ($queryString = "$!{text}")&#xd;
  ##&#xd;
  ## Create the query and set the query string.&#xd;
  #set ($query = $services.query.createQuery($queryString, 'solr'))&#xd;
  ##&#xd;
  ## Set query parameters.&#xd;
  #set ($discard = $query.setLimit($rows))&#xd;
  #set ($discard = $query.setOffset($start))&#xd;
  #set ($discard = $query.bindValue('sort', "${sort} ${sortOrder}"))&#xd;
  #set ($discard = $query.bindValue('tie', $solrConfig.tieBreaker))&#xd;
  #set ($discard = $query.bindValue('mm', $solrConfig.minShouldMatch))  &#xd;
  #setQueryFields($query)&#xd;
  #setPhraseFields($query)&#xd;
  #setFacetFields($query)&#xd;
  #setFilterQuery($query)&#xd;
  #setHighlightQuery($query)&#xd;
  #if ($debug)&#xd;
    #set ($discard = $query.bindValue('debugQuery', 'on'))&#xd;
  #end&#xd;
  ##&#xd;
  ## Execute the query.&#xd;
  #set ($searchResponse = $query.execute()[0])&#xd;
#end&#xd;
&#xd;
#macro (setQueryFields $query)&#xd;
  ## Specify which index fields are matched when a free text search is performed.&#xd;
  #if ($boost == '')&#xd;
    #if ($solrConfig.queryFields.substring(0, 0) == '')&#xd;
      ## If the value of the 'queryFields' parameter is a string then it means that the same query fields are used for&#xd;
      ## all result types.&#xd;
      #set ($boost = $solrConfig.queryFields)&#xd;
    #else&#xd;
      ## There are different query fields for each result type.&#xd;
      #set ($boost = $solrConfig.queryFields.get($type))&#xd;
    #end&#xd;
  #end&#xd;
  #if ("$!boost" != '')&#xd;
    #set ($discard = $query.bindValue('qf', $boost))&#xd;
  #end&#xd;
#end&#xd;
    &#xd;
#macro (setPhraseFields $query)&#xd;
  ## Set the main phrase field parameter boosts so that queries with all search terms&#xd;
  ## in close proximity have high relevance&#xd;
  #if ($solrConfig.phraseFields.substring(0, 0) == '')&#xd;
    ## If the value of the 'phraseFields' parameter is a string then it means that the&#xd;
    ## same query fields are used for all result types.&#xd;
    #set ($phraseFieldsBoost = $solrConfig.phraseFields)&#xd;
  #else&#xd;
    ## There are different phrase fields for each result type.&#xd;
    ## Including type = null, which will result from all facets being deselected&#xd;
    #set ($phraseFieldsBoost = $solrConfig.phraseFields.get("$!type"))&#xd;
  #end&#xd;
  #if ("$!phraseFieldsBoost" != '')&#xd;
    #set ($discard = $query.bindValue('pf', $phraseFieldsBoost))&#xd;
    #set ($discard = $query.bindValue('ps', $solrConfig.phraseFieldSlop))&#xd;
  #end&#xd;
  ## Set the bigram phrase field parameter boosts so that queries with groups of two&#xd;
  ## search terms in close proximity have high relevance&#xd;
  #if ($solrConfig.bigramPhraseFields.substring(0, 0) == '')&#xd;
    ## If the value of the 'bigramPhraseFields' parameter is a string then it means that the&#xd;
    ## same query fields are used for all result types.&#xd;
    #set ($bigramPhraseFieldsBoost = $solrConfig.bigramPhraseFields)&#xd;
  #else&#xd;
    ## There are different phrase fields for each result type.&#xd;
    ## Including type = null, which will result from all facets being deselected&#xd;
    #set ($bigramPhraseFieldsBoost = $solrConfig.bigramPhraseFields.get("$!type"))&#xd;
  #end&#xd;
  #if ("$!bigramPhraseFieldsBoost" != '')&#xd;
    #set ($discard = $query.bindValue('pf2', $bigramPhraseFieldsBoost))&#xd;
    #set ($discard = $query.bindValue('ps2', $solrConfig.bigramPhraseFieldSlop))&#xd;
  #end&#xd;
  ## Set the trigram phrase field parameter boosts so that queries with groups of three&#xd;
  ## search terms in close proximity have high relevance.&#xd;
  ## Generally (pf boost) > (pf3 boost) > (pf2 boost)&#xd;
  #if ($solrConfig.trigramPhraseFields.substring(0, 0) == '')&#xd;
    ## If the value of the 'trigramPhraseFields' parameter is a string then it means that the&#xd;
    ## same query fields are used for all result types.&#xd;
    #set ($trigramPhraseFieldsBoost = $solrConfig.trigramPhraseFields)&#xd;
  #else&#xd;
    ## There are different phrase fields for each result type.&#xd;
    ## including type = null, which will result from all facets being deselected&#xd;
    #set ($trigramPhraseFieldsBoost = $solrConfig.trigramPhraseFields.get("$!type"))&#xd;
  #end&#xd;
  #if ("$!trigramPhraseFieldsBoost" != '')&#xd;
    #set ($discard = $query.bindValue('pf3', $trigramPhraseFieldsBoost))&#xd;
    #set ($discard = $query.bindValue('ps3', $solrConfig.trigramPhraseFieldSlop))&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#macro (setFacetFields $query)&#xd;
  #set ($discard = $query.bindValue('facet', $facetEnabled))&#xd;
  #if ($facetEnabled)&#xd;
    ## The facets are displayed in this order so keep the most important facets first.&#xd;
    #set ($facetFields = $solrConfig.facetFields)&#xd;
    ## In order to support multi-select faceting we need to exclude the corresponding filters when faceting.&#xd;
    ## See http://wiki.apache.org/solr/SimpleFacetParameters#Multi-Select_Faceting_and_LocalParams&#xd;
    #set ($facetFieldsWithFilterExcludes = [])&#xd;
    ## The type facet doesn't support multiple selection because we use different query fields for different result&#xd;
    ## types so the number of matches for the type facet changes when a result type is selected/unselected.&#xd;
    ## We don't allow multiple selection on the space facet because we perform a 'facet.prefix'-based drill down.&#xd;
    #set ($singleSelectionFacets = ['type', 'space_facet'])&#xd;
    #foreach ($facet in $facetFields)&#xd;
      #set ($excludeTaggedFilter = '')&#xd;
      #if (!$singleSelectionFacets.contains($facet))&#xd;
        #set ($excludeTaggedFilter = "{!ex=$facet}")&#xd;
      #end&#xd;
      #set ($discard = $facetFieldsWithFilterExcludes.add("$excludeTaggedFilter$facet"))&#xd;
    #end&#xd;
    #set ($discard = $query.bindValue('facet.field', $facetFieldsWithFilterExcludes))&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#macro (setFilterQuery $query)&#xd;
  ##&#xd;
  ## Collect the query filters.&#xd;
  #set ($filters = {})&#xd;
  ## Add the default filters if not specified in the configuration.&#xd;
  #if (!$solrConfig.filterQuery || $solrConfig.filterQuery.isEmpty())&#xd;
    ## Uncomment the following line of code if you want to search by default also in:&#xd;
    ## * the default translation of documents that are not translated in the current locale&#xd;
    ## * the "xx" translation if the current locale "xx_YY" doesn't have a translation available&#xd;
    ##   (e.g. "pt" when "pt_BR" is not available)&#xd;
    ## See the discussion on XWIKI-9977.&#xd;
    ##set ($discard = $filters.put('locales', ["$xcontext.locale"]))&#xd;
    #if (!$xcontext.isMainWiki())&#xd;
      ## Subwikis search by default in their content only.&#xd;
      #set ($discard = $filters.put('wiki', [$xcontext.database]))&#xd;
    #elseif ($solrConfig.wikisSearchableFromMainWiki)&#xd;
      ## The list of wikis that are searched by default can be configured.&#xd;
      #set ($discard = $filters.put('wiki', $solrConfig.wikisSearchableFromMainWiki))&#xd;
    #end&#xd;
    #if ($xwiki.getUserPreference('displayHiddenDocuments') != 1)&#xd;
      #set ($discard = $filters.put('hidden', [false]))&#xd;
    #end&#xd;
  #end&#xd;
  ## Add the facets.&#xd;
  #set ($prefixFacets = ['space_facet'])&#xd;
  #foreach ($parameter in $request.parameterMap.entrySet())&#xd;
    #if ($parameter.key.startsWith('f_'))&#xd;
      #set ($fieldName = $parameter.key.substring(2))&#xd;
      #set ($escapedValues = [])&#xd;
      #foreach ($value in $parameter.value)&#xd;
        #set ($discard = $escapedValues.add("#escapeFilterValue($value)"))&#xd;
      #end&#xd;
      #set ($discard = $filters.put($fieldName, $escapedValues))&#xd;
      #if ($prefixFacets.contains($fieldName))&#xd;
        #set ($parts = $parameter.value.get(0).split('/', 2))&#xd;
        #set ($length = $mathtool.toInteger($parts.get(0)) + 1)&#xd;
        #set ($prefix = "$length/$parts.get(1)")&#xd;
        #set ($discard = $query.bindValue("f.${fieldName}.facet.prefix", $prefix))&#xd;
        #set ($discard = $prefixFacets.remove($fieldName))&#xd;
      #end&#xd;
    #end&#xd;
  #end&#xd;
  ## Specify the initial prefix for the remaining prefix facets.&#xd;
  #foreach ($facet in $prefixFacets)&#xd;
    #set ($discard = $query.bindValue("f.${facet}.facet.prefix", '0/'))&#xd;
  #end&#xd;
  ##&#xd;
  ## Build the filter query.&#xd;
  #set ($filterQuery = [])&#xd;
  #if ($solrConfig.filterQuery)&#xd;
    #set ($discard = $filterQuery.addAll($solrConfig.filterQuery))&#xd;
  #end&#xd;
  #foreach ($filter in $filters.entrySet())&#xd;
    ## Use OR between different values of the same filter/facet.&#xd;
    ## Tag the filter so that we can exclude it when faceting in order to support multi-select faceting.&#xd;
    #set ($discard = $filterQuery.add("{!tag=$filter.key}$filter.key:($!stringtool.join($filter.value, ' OR '))"))&#xd;
  #end&#xd;
  #set ($discard = $query.bindValue('fq', $filterQuery))&#xd;
#end&#xd;
&#xd;
#macro(setHighlightQuery $query)&#xd;
  #set ($discard = $query.bindValue('hl', $highlightEnabled))&#xd;
#end&#xd;
&#xd;
#macro (escapeFilterValue $value)&#xd;
## Check if the given value is a range.&#xd;
#if ($rangePattern.matcher($value).matches() || $wildcardPattern.matcher($value).matches())##&#xd;
$value##&#xd;
#else##&#xd;
"$stringtool.replaceEach($value, ['\', '"'], ['\\', '\"'])"##&#xd;
#end##&#xd;
#end&#xd;
&#xd;
#macro (processRequestParameters)&#xd;
  #set ($text = "$!request.text")&#xd;
  #set ($boost = "$!request.boost")&#xd;
  #set ($debug = "$!request.debug" != '')&#xd;
  ##&#xd;
  ## Highlight enabled&#xd;
  ## First check the request, then the configuration and enable it by default&#xd;
  #if ($request.highlight)&#xd;
    #set ($highlightEnabled = $request.highlight != 'false')&#xd;
  #elseif ($solrConfig.containsKey('highlightEnabled'))&#xd;
    #set ($highlightEnabled = $solrConfig.highlightEnabled)&#xd;
  #else&#xd;
    #set ($highlightEnabled = true)&#xd;
  #end&#xd;
  ##&#xd;
  ## Facet enabled&#xd;
  ## First check the request, then the configuration and enable it by default&#xd;
  #if ($request.facet)&#xd;
    #set ($facetEnabled = $request.facet != 'false')&#xd;
  #elseif ($solrConfig.containsKey('facetEnabled'))&#xd;
    #set ($facetEnabled = $solrConfig.facetEnabled)&#xd;
  #else&#xd;
    #set ($facetEnabled = true)&#xd;
  #end&#xd;
  ##&#xd;
  ## Pagination&#xd;
  #set ($rows = $numbertool.integer($request.rows))&#xd;
  #if ("$!rows" == '')&#xd;
    #set ($rows = 10)&#xd;
  #end&#xd;
  #set ($start = $numbertool.integer($request.firstIndex))&#xd;
  #if ("$!start" == '')&#xd;
    #set ($start = 0)&#xd;
  #end&#xd;
  ##&#xd;
  ## Sort&#xd;
  #set ($sort = $request.sort)&#xd;
  #if ("$!sort" == '')&#xd;
    #set ($sort = 'score')&#xd;
  #end&#xd;
  #set ($sortOrder = $request.sortOrder)&#xd;
  #if ("$!sortOrder" == '')&#xd;
    #set ($sortOrder = 'desc')&#xd;
  #elseif ($sortOrder != 'desc')&#xd;
    #set ($sortOrder = 'asc')&#xd;
  #end&#xd;
  ##&#xd;
  ## Result type&#xd;
  ## We store the selected result type because we need it to decide what search and sort fields to use.&#xd;
  #set ($type = $request.getParameterValues('f_type'))&#xd;
  #if ($type &amp;&amp; $type.size() == 1)&#xd;
    #set ($type = $type.get(0))&#xd;
  #else&#xd;
    ## Extract the result type from the filter query, if specified.&#xd;
    #foreach ($item in $solrConfig.filterQuery)&#xd;
      #if ($item.startsWith('type:'))&#xd;
        #set ($type = $item.substring(5))&#xd;
        #break&#xd;
      #end&#xd;
    #end&#xd;
  #end&#xd;
#end&#xd;
&#xd;
#macro (displaySearchUI)&#xd;
  #set($void = $services.progress.startStep('#displaySearchUI'))&#xd;
  #set($void = $services.progress.pushLevel())&#xd;
  #set ($discard = $xwiki.ssx.use('Main.SolrSearch'))&#xd;
  #set ($discard = $xwiki.jsx.use('Main.SolrSearch'))&#xd;
  ## Disable the document extra data: comments, attachments, history...&#xd;
  #set ($displayDocExtra = false)&#xd;
  #processRequestParameters()&#xd;
  (% class="search-ui" %)(((&#xd;
    #if ($xcontext.action == 'get')&#xd;
      {{html clean="false"}}&#xd;
      ## The search UI is updated dynamically through AJAX and we need to pull the skin extensions.&#xd;
      ## We put the skin extension imports inside a &lt;noscript> element to prevent jQuery from fetching the JavaScript&#xd;
      ## files automatically (we want to fetch only the new JavaScript files).&#xd;
      &lt;noscript class="hidden skin-extension-imports">#skinExtensionHooks&lt;/noscript>&#xd;
      {{/html}}&#xd;
&#xd;
    #end&#xd;
    #displaySearchForm()&#xd;
    #if ($text != '')&#xd;
      #getSearchResults()&#xd;
      #if ($debug)&#xd;
        #displaySearchDebugInfo()&#xd;
      #end&#xd;
      (% class="search-results-container row" %)(((&#xd;
        #if ($facetEnabled)&#xd;
          (% class="col-xs-12 col-sm-4 col-sm-push-8 col-md-3 col-md-push-9" %)(((&#xd;
            #displaySearchFacets($searchResponse)&#xd;
          )))&#xd;
        #end&#xd;
        (% class="search-results-left col-xs-12#if ($facetEnabled) col-sm-8 col-sm-pull-4 col-md-9 col-md-pull-3#end" %)&#xd;
        (((&#xd;
          #displaySearchResultsSort()&#xd;
&#xd;
          #displaySearchResults()&#xd;
        )))&#xd;
      )))&#xd;
    #end&#xd;
  )))&#xd;
  #set($void = $services.progress.popLevel())&#xd;
  #set($void = $services.progress.endStep())&#xd;
#end&#xd;
&#xd;
#macro (outputRSSFeed)&#xd;
  ##&#xd;
  ## Get the search results.&#xd;
  ##&#xd;
  #processRequestParameters()&#xd;
  #getSearchResults()&#xd;
  #set ($list = [])&#xd;
  #set ($results = $searchResponse.results)&#xd;
  #foreach ($searchResult in $results)&#xd;
    #set ($searchResultDocumentReference = $services.solr.resolveDocument($searchResult))&#xd;
    #set ($discard = $list.add("$searchResultDocumentReference"))&#xd;
  #end&#xd;
  ##&#xd;
  ## Compute the feed URI.&#xd;
  ##&#xd;
  #set ($parameters = {})&#xd;
  #set ($discard = $parameters.putAll($request.getParameterMap()))&#xd;
  #set ($discard = $parameters.remove('outputSyntax'))&#xd;
  #set ($discard = $parameters.remove('media'))&#xd;
  #set ($feedURI = $doc.getExternalURL('view', $escapetool.url($parameters)))&#xd;
  ##&#xd;
  ## Configure the feed.&#xd;
  ##&#xd;
  #set ($feed = $xwiki.feed.getDocumentFeed($list, {}))&#xd;
  #set ($discard = $feed.setLink($feedURI))&#xd;
  #set ($discard = $feed.setUri($feedURI))&#xd;
  #set ($discard = $feed.setAuthor('XWiki'))&#xd;
  #set ($title = $services.localization.render('search.rss', ["[$text]"]))&#xd;
  #set ($discard = $feed.setTitle($title))&#xd;
  #set ($discard = $feed.setDescription($title))&#xd;
  #set ($discard = $feed.setLanguage("$xcontext.locale"))&#xd;
  #set ($discard = $feed.setCopyright($xwiki.getXWikiPreference('copyright')))&#xd;
  ##&#xd;
  ## Output the feed.&#xd;
  ##&#xd;
  #set ($discard = $response.setContentType('application/rss+xml'))&#xd;
  $xwiki.feed.getFeedOutput($feed, 'rss_2.0')&#xd;
#end&#xd;
&#xd;
#macro (handleSolrSearchRequest)&#xd;
  ## Preselect facet values only for the facets that are enabled.&#xd;
  #set ($discard = $solrConfig.facetQuery.keySet().retainAll($solrConfig.facetFields))&#xd;
  #if ($request.media == 'rss')&#xd;
    #outputRSSFeed()&#xd;
  #elseif ("$!request.r" == '1' || $solrConfig.facetQuery.isEmpty())&#xd;
    #displaySearchUI()&#xd;
  #else&#xd;
    ## Redirect using preselected facet values.&#xd;
    #set ($extraParams = {})&#xd;
    #foreach ($entry in $solrConfig.facetQuery.entrySet())&#xd;
      #set ($discard = $extraParams.put("f_$entry.key", $entry.value))&#xd;
    #end&#xd;
    ## Prevent redirect loop.&#xd;
    #set ($extraParams.r = 1)&#xd;
    #extendQueryString($url $extraParams)&#xd;
    $response.sendRedirect($url)&#xd;
  #end&#xd;
#end&#xd;
{{/velocity}}&#xd;
</content>
</xwikidoc>