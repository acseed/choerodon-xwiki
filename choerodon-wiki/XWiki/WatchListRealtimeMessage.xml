<?xml version='1.1' encoding='UTF-8'?>
<xwikidoc version="1.3" reference="XWiki.WatchListRealtimeMessage" locale="">
  <web>XWiki</web>
  <name>WatchListRealtimeMessage</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>XWiki.admin</creator>
  <creationDate>1534755124000</creationDate>
  <parent>XWiki.WebHome</parent>
  <author>XWiki.admin</author>
  <contentAuthor>XWiki.admin</contentAuthor>
  <date>1534755124000</date>
  <contentUpdateDate>1534755124000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment>Imported from XAR</comment>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>XWiki.WatchListRealtimeMessage</name>
    <number>0</number>
    <className>XWiki.Mail</className>
    <guid>597cf72a-594b-48e8-802d-d1c91942c01b</guid>
    <class>
      <name>XWiki.Mail</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <html>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>html</name>
        <number>4</number>
        <prettyName>HTML</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </html>
      <language>
        <disabled>0</disabled>
        <name>language</name>
        <number>2</number>
        <prettyName>Language</prettyName>
        <size>5</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </language>
      <subject>
        <disabled>0</disabled>
        <name>subject</name>
        <number>1</number>
        <prettyName>Subject</prettyName>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </subject>
      <text>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>text</name>
        <number>3</number>
        <prettyName>Text</prettyName>
        <rows>15</rows>
        <size>80</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </text>
    </class>
    <property>
      <html>#set ($event = $events[0])
#set ($eventDocument = $xwiki.getDocument($event.documentReference))
#if ($event.type != 'delete')
  #set ($document = $xwiki.getDocument($eventDocument, $event.version))
#else
  ## Just use whatever getDocument() returns. It can be a shallow document (isNew() == true) or a real document (created between
  ## the event and the mail prepare step), we are just careful not to use its content, just its name and URL.
  #set ($document = $eventDocument)
#end
##
## Document type, if applicable. Not available for deleted docs unless we start looking through the recycle bin.
#set ($documentType = 'document')
#if ($event.type != 'delete')
  #set ($xobjects = $document.xWikiObjects)
#end
#foreach ($classFullName in $xobjects.keySet())
  #set ($classDocument = $xwiki.getDocument($classFullName))
  #set ($sheets = $services.sheet.getClassSheets($classDocument))
  #if ($sheets &amp;&amp; $sheets.size() > 0)
    ## Determine the class pretty name
    ## Note: Code taken from "Main.SolrClassFacet"
    #set ($classPrettyName = $stringtool.removeEnd($classDocument.name, 'Class'))
    #set ($translationKey = "solr.field.class.$classPrettyName")
    #if ($services.localization.get($translationKey))
      #set ($classPrettyName = $services.localization.render('$translationKey'))
    #else
      ## Some of the default classes have names starting with 'XWiki'.
      #set ($classPrettyName = $stringtool.removeStart($classPrettyName, 'XWiki'))
      #set ($classPrettyName = $stringtool.join($stringtool.splitByCharacterTypeCamelCase($classPrettyName), ' '))
      ## Make sure we don't have isolated upper case letters.
      #set ($classPrettyName = $classPrettyName.replaceAll('(^| )([\p{Lu}]) ', '$1$2'))
    #end
    #set ($documentType = $classPrettyName.toLowerCase())
    #break
  #end
#end
##
## Attachment displayer, specific to the Attachment handling below.
#macro (displayAttachments $attachments)
  &lt;ul>
  #foreach ($attachment in $attachments)
    &lt;li>$attachment.filename ($attachment.mimeType)&lt;/li>
  #end
  &lt;/ul>
#end

&lt;div>

&lt;table>
  &lt;tr style='vertical-align: top'>
    ## User
    #if ("$!event.authorReference" != '')
      #set ($userURL = $xwiki.getDocument($event.authorReference).externalURL)
    #end
    &lt;td colspan='2'>
      &lt;table>
        &lt;tr>
          ## User Avatar
          &lt;td rowspan='2' >
            ## The string returned by XWiki#getUserName() is XML encoded.
            #if ("$!event.authorReference" != '')&lt;a href="$userURL">#end
              ## Note: We are currently attaching the user's avatar to the current mail. This is now done in the java side, but we should be able to do it
              ## from the template in the future when https://jira.xwiki.org/browse/XWIKI-10638 gets implemented.
              ###getUserAvatarURL($event.authorReference $avatarURL 30)
              ##&lt;img src="${escapetool.xml($avatarURL.url)}" alt="${xwiki.getUserName($event.author, false)}" />
              &lt;img src="cid:${event.author}.png" alt="${xwiki.getUserName($event.author, false)}" />
            #if ("$!event.authorReference" != '')&lt;/a>#end
          &lt;/td>
          ## User Name
          ## Note: xwiki.getUserName(userName) does not generate an external URL, so we need to add the link manually.
          &lt;td style='vertical-align: bottom;'>
            #if ("$!event.authorReference" != '')&lt;a href="$userURL">#end
            ${xwiki.getUserName($event.author, false)}
            #if ("$!event.authorReference" != '')&lt;/a>#end
          &lt;/td>
        &lt;/tr>
        &lt;tr>
          ## User ID (Wiki)
          &lt;td style='color: gray; vertical-align: top;'>
            #if ("$!event.authorReference" == '')
              $services.model.resolveDocument($event.author).name
            #else
              ${escapetool.xml($event.authorReference.name)}
              #if ($event.authorReference.wikiReference.name != $xcontext.getMainWikiName())
                (${escapetool.xml($event.authorReference.wikiReference.name)})
              #end
            #end
          &lt;/td>
        &lt;/tr>
      &lt;/table>
    &lt;/td>
  &lt;/tr>
  ## Action
#if ($event.type == 'create')
  &lt;tr>&lt;td>created the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
#elseif ($event.type == 'delete')
  &lt;tr>&lt;td>deleted the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
#elseif ($event.type == 'update')
  #set ($originalDocument = $xwiki.getDocument($eventDocument, $event.previousVersion))
  ##
  #set ($contentDiff = $document.getContentDiff($originalDocument, $document))
  #set ($metadataDiff = $document.getMetaDataDiff($originalDocument, $document))
  #set ($attachmentDiff = $document.getAttachmentDiff($originalDocument, $document))
  #set ($objectDiff = $document.getObjectDiff($originalDocument, $document))
  #set ($classDiff = $document.getClassDiff($originalDocument, $document))
  ## Metadata
  #if ($metadataDiff.size() > 0)
    #set ($metadataDiffHeaderDisplayed = false)
    ## Skip fields that obviously are changed automatically during an update, since we only care about fields that are explicitly changed.
    #set ($skippedFields = ['contentAuthor', 'author', 'date'])
    #set ($metadataDiffsToDisplay = [])
    #foreach ($metadataDiffItem in $metadataDiff)
      #if (!$skippedFields.contains($metadataDiffItem.field))
        #set ($discard = $metadataDiffsToDisplay.add($metadataDiffItem))
      #end
    #end
    #if ($metadataDiffsToDisplay.size() > 0)
      &lt;tr>&lt;td>
        &lt;p>updated the metadata of the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/p>
        &lt;ul>
        #foreach ($metadataDiffToDisplay in $metadataDiffsToDisplay)
          &lt;li>$metadataDiffToDisplay&lt;/li>
        #end
        &lt;/ul>
      &lt;/tr>&lt;/td>
      ## Mark displayed
      #set ($displayed = true)
    #end
  #end
  ## Content
  #if ($contentDiff.size() > 0)
    &lt;tr>&lt;td>updated the content of the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
    ## Mark displayed
    #set ($displayed = true)
  #end
  ## Class
  #if ($classDiff.size() > 0)
    &lt;tr>&lt;td>updated $classDiff.size() properties of the class &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
    &lt;tr>&lt;td>
      &lt;ul>
      #foreach ($classDiffItems in $classDiff)
        #set ($classDiffItem = $classDiffItems[0])
        ## FIXME: Handle propetry renames which show up as added (because an add+delete is performed in the database, i.e. no rename action).
        &lt;li>$classDiffItem.action "$classDiffItem.propName" ($classDiffItem.propType)&lt;/li>
      #end
      &lt;/ul>
    &lt;/td>&lt;/tr>
    ## Mark displayed
    #set ($displayed = true)
  #end
  ## Attachments
  #if ($attachmentDiff.size() > 0)
    #set ($newAttachments = [])
    #set ($updatedAttachments = [])
    #set ($deletedAttachments = [])
    #foreach ($attachmentDiffItem in $attachmentDiff)
      #if ($attachmentDiffItem.type == 'insert')
        #set ($discard = $newAttachments.add($attachmentDiffItem.newAttachment))
      #elseif ($attachmentDiffItem.type == 'change')
        #set ($discard = $updatedAttachments.add($attachmentDiffItem.newAttachment))
      #elseif ($attachmentDiffItem.type == 'delete')
        #set ($discard = $deletedAttachments.add($attachmentDiffItem.origAttachment))
      #end
    #end
    #if ($newAttachments.size() > 0)
      &lt;tr>&lt;td>added $newAttachments.size() attachment(s) to the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
      &lt;tr>&lt;td>#displayAttachments($newAttachments)&lt;/td>&lt;/tr>
    #end
    #if ($updatedAttachments.size() > 0)
      &lt;tr>&lt;td>updated $updatedAttachments.size() attachment(s) of the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
      &lt;tr>&lt;td>#displayAttachments($updatedAttachments)&lt;/td>&lt;/tr>
    #end
    #if ($deletedAttachments.size() > 0)
      &lt;tr>&lt;td>deleted $deletedAttachments.size() attachment(s) from the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
      &lt;tr>&lt;td>#displayAttachments($deletedAttachments)&lt;/td>&lt;/tr>
    #end
    ## Mark displayed
    #set ($displayed = true)
  #end
  ## Objects
  #if ($objectDiff.size() > 0)
    ## How many objects?
    #if ($objectDiff.size() > 1)
      ## Many, don`t bother displaying here.
      &lt;tr>&lt;td>updated $objectDiff.size() object(s) of the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
      &lt;tr>&lt;td>
        &lt;ul>
          #foreach ($objectDiffItems in $objectDiff)
            #set ($objectDiffItem = $objectDiffItems[0])
            &lt;li>$objectDiffItem.action ${objectDiffItem.className}[$objectDiffItem.number]&lt;/li>
          #end
        &lt;/ul>
      &lt;/td>&lt;/tr>
      ## Mark displayed
      #set ($displayed = true)
    #else
      ## Just one, try to understand what it was, based on the class.
      #set ($objectDiffItem = $objectDiff[0][0])
      #set ($objectClass = $objectDiffItem.className)
      #if ($objectDiffItem.action == 'object-removed')
        #set ($object = $originalDocument.getObject($objectClass, $objectDiffItem.number))
      #else
        #set ($object = $document.getObject($objectClass, $objectDiffItem.number))
      #end
      #set ($originalObject = $originalDocument.getObject($objectClass, $objectDiffItem.number))
      #if ($objectClass == 'XWiki.XWikiComments')
        #set ($commentAuthorReference = $services.model.resolveDocument($object.getValue('author'), $document.documentReference.wikiReference))
        #set ($commentAuthorSerialized = $services.model.serialize($commentAuthorReference))
        #set ($commentAuthorURL = $xwiki.getDocument($commentAuthorReference).getExternalURL())
        ## Comment or annotation?
        #set ($commentType = 'comment')
        #if ("$!object.getValue('selection')" != '')
          #set ($commentType = 'annotation')
        #end
        #if ($objectDiffItem.action == 'object-added')
          ## New comment
          #set ($replyToCommentObject = $document.getObject($objectClass, $object.getValue('replyto')))
          #if ("$!replyToCommentObject" != '')
            ## A new reply comment.
            #set ($replyToAuthor = $replyToCommentObject.getValue('author'))
            #set ($replyToAuthorReference = $services.model.resolveDocument($replyToAuthor, $document.documentReference.wikiReference))
            #set ($replyToAuthorSerialized = $services.model.serialize($replyToAuthorReference))
            #set ($replyToAuthorDocument = $xwiki.getDocument($replyToAuthorReference))
            #if (!$replyToAuthorDocument.isNew())
              #set ($replyToAuthorURL = $replyToAuthorDocument.externalURL)
              #set ($replyToOutput = "&lt;a href=""$replyToAuthorURL"">$xwiki.getUserName($replyToAuthorSerialized, false)&lt;/a>")
            #else
              #set ($replyToOutput = """${replyToAuthor}""")
            #end
            &lt;tr>&lt;td>added a $commentType in reply to $replyToOutput on the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
          #else
            ## A regular new comment.
            #if ("$!event.authorReference" == '')
              #set ($asGuestNamedOutput = "as ""$object.getValue('author')"" ")
            #end
            &lt;tr>&lt;td>added a $commentType $!{asGuestNamedOutput}on the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
          #end
          &lt;tr>&lt;td style='padding-left: 2em'>
            #if ($commentType == 'annotation')
              &lt;blockquote style='padding-left: 1em;
                                 border-left: 0.25em solid lightgray;
                                 margin-left: 0px'>
                $object.selection
              &lt;/blockquote>
            #end
            $object.comment
          &lt;/td>&lt;/tr>
        #elseif ($objectDiffItem.action == 'added' || $objectDiffItem.action == 'changed')
          ## Existing comment modified (property added or property modified)
          ## Their own comment?
          #if ($event.authorReference == $commentAuthorReference)
            &lt;tr>&lt;td>updated their $commentType on the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
          #else
            &lt;tr>&lt;td>updated a $commentType made by &lt;a href="$commentAuthorURL">$xwiki.getUserName($commentAuthorSerialized, false)&lt;/a> on the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
          #end
          #if ($objectDiffItem.propName == 'comment')
            &lt;tr>&lt;td>from: &lt;blockquote>$objectDiffItem.prevValue&lt;/blockquote>&lt;/td>&lt;/tr>
            &lt;tr>&lt;td>to: &lt;blockquote>$objectDiffItem.newValue&lt;/blockquote>&lt;/td>&lt;/tr>
          #end
        #elseif ($objectDiffItem.action == 'object-removed')
          #if ($event.authorReference == $commentAuthorReference)
            &lt;tr>&lt;td>removed their $commentType from the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
          #else
            &lt;tr>&lt;td>removed a $commentType made by &lt;a href="$commentAuthorURL">$xwiki.getUserName($commentAuthorSerialized, false)&lt;/a> from the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
          #end
        #end
        ## View all comments link
        &lt;tr>&lt;td>
          &lt;a href="${document.getExternalURL('view')}#Comments">View all comments&lt;/a>
        &lt;/td>&lt;/tr>
        ## Mark object displayed
        #set ($objectDisplayed = true)
      #elseif ($objectClass == 'XWiki.XWikiRights')
        &lt;tr>&lt;td>updated the rights of the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
        ## Mark object displayed
        #set ($objectDisplayed = true)
      #elseif ($objectClass == 'Blog.BlogPostClass')
        ## Interested just in add or update
        #if ($objectDiffItem.action != 'object-removed')
          #set ($originalPublished = $originalObject.getValue('published'))
          #set ($newPublished = $object.getValue('published'))
          #if ($newPublished == '1' &amp;&amp; $originalPublished != '1')
            &lt;tr>&lt;td>published the blog post &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
            ## Mark object displayed
            #set ($objectDisplayed = true)
          #end
        #end
      #end
      ## Generic object fallback for when no object displayer is available for the object's class or when the displayer did not output anything.
      #if (!$objectDisplayed)
        #if ($objectDiffItem.action == 'object-added')
          #set ($objectAction = 'added')
        #elseif ($objectDiffItem.action == 'object-removed')
          #set ($objectAction = 'removed')
        #else
          #set ($objectAction = 'updated')
        #end
        &lt;tr>&lt;td>$objectAction an object of type "$objectClass" #if($objectAction != 'removed')on#{else}from#end the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
        ## Mark displayed
        #set ($displayed = true)
      #end
    #end
  #end
  ## Generic update event fallback for when no output was produced by the current displayers (content, metadata, objects, etc.).
  #if (!$displayed &amp;&amp; !$objectDisplayed)
    &lt;tr>&lt;td>updated the $documentType &lt;a href="$document.getExternalURL()">$document.name&lt;/a>&lt;/td>&lt;/tr>
  #end
#end

&lt;/table>

&lt;hr/>

#if ($event.type == 'delete')
  #set ($recycleBinURL = $document.getExternalURL('view', "viewer=recyclebinlist"))
  &lt;p>The list of deleted versions for the document are available in the &lt;a href="$recycleBinURL">Recycle Bin view of the affected document&lt;/a>.&lt;/p>
#else
  #set ($changeURL = $document.getExternalURL('view', "viewer=changes&amp;rev1=${event.previousVersion}&amp;rev2=${event.version}"))
  &lt;p>Full change details are available in the &lt;a href="$changeURL">Changes View of the affected document&lt;/a>.&lt;/p>
#end

#*
## Unsubscribe / Remove from WatchList.
FIXME: we need a way for an admin/script to check the watchlist of a user.
#if ($services.watchlist.isWatched($services.model.serialize($document.documentReference), "DOCUMENT"))
  #set ($watchType = 'document')
  #set ($watchedEntityReference = $services.model.serialize($document.documentReference))
  #set ($watchedEntity = "$document.name (${watchedEntityReference})")
#elseif ($services.watchlist.isWatched($services.model.serialize($document.documentReference.lastSpaceReference), "SPACE"))
#elseif ($services.watchlist.isWatched($services.model.serialize($document.documentReference.wikiReference.name), "WIKI"))
#elseif ($services.watchlist.isWatched($services.model.serialize($event.authorReference), "USER"))
#end
#set ($unsubscribeLink = $xwiki.getURL($event.authorReference, 'view', "xpage=watch&amp;do=remove${watchType}&amp;reference=${escapetool.url($watchedEntityReference)}&amp;xredirect=${escapetool.url($xwiki.getURL($event.authorReference))}"))
&lt;p>
  You are receiving this message because you are currently watching the activity for the $watchType "$watchedEntity".&lt;br/>
  To stop receiving WatchList messages for this $watchType, you can &lt;a href="$unsubscribeLink">remove "$watchedEntity" from your WatchList&lt;/a>.
&lt;/p>

*#
&lt;/div></html>
    </property>
    <property>
      <language>en</language>
    </property>
    <property>
      <subject>Watchlist for document "$xwiki.getDocument($events[0].documentReference).name" ($events[0].documentReference)</subject>
    </property>
    <property>
      <text>## Note: ASCII formatting applies here since no whitespace cleaning is performed.
##       Indentation is not allowed, but faked through velocity comments.
##
#set ($event = $events[0])
#set ($eventDocument = $xwiki.getDocument($event.documentReference))
#if ($event.type != 'delete')
#**##set ($document = $xwiki.getDocument($eventDocument, $event.version))
#else
#**### Just use whatever getDocument() returns. It can be a shallow document (isNew() == true) or a real document (created between
#**### the event and the mail prepare step), we are just careful not to use its content, just its name and URL.
#**##set ($document = $eventDocument)
#end
##
## Document type, if applicable
#set ($documentType = 'document')
#if ($event.type != 'delete')
#**##set ($xobjects = $document.xWikiObjects)
#end
#foreach ($classFullName in $xobjects.keySet())
#**##set ($classDocument = $xwiki.getDocument($classFullName))
#**##set ($sheets = $services.sheet.getClassSheets($classDocument))
#**##if ($sheets &amp;&amp; $sheets.size() > 0)
#****### Determine the class pretty name
#****### Note: Code taken from "Main.SolrClassFacet"
#****##set ($classPrettyName = $stringtool.removeEnd($classDocument.name, 'Class'))
#****##set ($translationKey = "solr.field.class.$classPrettyName")
#****##if ($services.localization.get($translationKey))
#******##set ($classPrettyName = $services.localization.render('$translationKey'))
#****##else
#******### Some of the default classes have names starting with 'XWiki'.
#******##set ($classPrettyName = $stringtool.removeStart($classPrettyName, 'XWiki'))
#******##set ($classPrettyName = $stringtool.join($stringtool.splitByCharacterTypeCamelCase($classPrettyName), ' '))
#******### Make sure we don't have isolated upper case letters.
#******##set ($classPrettyName = $classPrettyName.replaceAll('(^| )([\p{Lu}]) ', '$1$2'))
#****##end
#****##set ($documentType = $classPrettyName.toLowerCase())
#****##break
#**##end
#end
##
##
#set ($userWiki = $event.authorReference.wikiReference.name)
#set ($output = "$xwiki.getUserName($event.author, false)")
#if ("$!event.authorReference" == '')
#**##set ($output = "$output ($event.author)")
#else
#**##set ($output = "$output (#if ($userWiki != $xcontext.getMainWikiName())${userWiki}:#end${event.authorReference.name})")
#end
##
#if ($event.type == 'create')
#**##set ($output = "$output created the $documentType ""$document.name"" ($document.prefixedFullName) $document.getExternalURL()")
#elseif ($event.type == 'delete')
#**##set ($output = "$output deleted the $documentType ""$document.name"" ($document.prefixedFullName) $document.getExternalURL()")
#elseif ($event.type == 'update')
#**##set ($output = "$output updated the $documentType ""$document.name"" ($document.prefixedFullName) $document.getExternalURL()")
#end

$output

----------
#if ($event.type == 'delete')
#**##set ($recycleBinURL = $document.getExternalURL('view', "viewer=recyclebinlist"))
#**#The list of deleted versions for the document are available in the Recycle Bin view of the affected document: $recycleBinURL
#else
#**##set ($changeURL = $document.getExternalURL('view', "viewer=changes&amp;rev1=${event.previousVersion}&amp;rev2=${event.version}"))
#**#Full change details are available in the Changes View of the affected document: $changeURL
#end
## TODO: Some more details, or is this level of information enough for the plain text message?</text>
    </property>
  </object>
</xwikidoc>